{"version":3,"sources":["AppDispatch.tsx","features/Form/FormDispatch.tsx","features/Form/FormItem.tsx","features/Form/formReducer.tsx","features/Form/Form.tsx","features/MessageList.tsx","App.tsx","business/getFormValues.ts","business/convertArrayToObject.ts","reportWebVitals.ts","index.tsx"],"names":["AppDispatch","React","createContext","undefined","FormDispatch","FormItemWrap","styled","div","CommonFormElement","css","Select","select","Input","input","Option","option","ButtonWrap","Button","button","SELECT_LIST","FormItem","props","dispatch","useContext","index","type","value","canDeleteItem","canCopyItem","onChange","event","payload","target","itemIndex","map","selectItem","itemType","getInputType","onClick","formReducer","state","action","upperElementIndex","formItemList","partBeforeNewItem","slice","partAfterNewItem","newFormItem","id","counterId","newformItemList","currElIndex","filter","formItem","newType","formItemElem","elemIndex","newValue","FormContainer","form","SubmitButton","initialState","INITIAL_ID","getForm","length","Form","appDispatch","useReducer","Provider","e","preventDefault","MessageListWrap","MessageListContainer","MessageListHeader","h3","FormData","pre","ConvertButton","getConvertedValuesString","convertedValues","JSON","stringify","MessageList","formData","formValues","message","disabled","Boolean","Container","reducer","find","formitem","reduce","prevFormValues","currFormItem","getFormValues","typeList","valueList","prevArray","convertArrayToObject","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3601d4d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ActionType } from \"./types\";\r\n\r\nexport const AppDispatch = React.createContext<React.Dispatch<ActionType>>(\r\n  undefined as any\r\n);\r\n","import React from \"react\";\r\nimport { ActionType } from \"../../types\";\r\n\r\nexport const FormDispatch = React.createContext<React.Dispatch<ActionType>>(\r\n  undefined as any\r\n);\r\n","import { FormItemValues, SelectListType, SelectType } from \"../../types\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { css } from \"styled-components\";\r\nimport { useContext } from \"react\";\r\nimport { FormDispatch } from \"./FormDispatch\";\r\n\r\ntype FormItemPropsType = FormItemValues & {\r\n  index: number;\r\n  canDeleteItem: Boolean;\r\n  canCopyItem: Boolean;\r\n};\r\n\r\nconst FormItemWrap = styled.div`\r\n  display: flex;\r\n  border: 1px grey black;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst CommonFormElement = css`\r\n  display: flex;\r\n  width: 300px;\r\n  height: 50px;\r\n  border: 2px solid #949494;\r\n  border-radius: 4px;\r\n  color: #4b4b4b;\r\n  padding: 0 1em;\r\n  &:focus,\r\n  &:focus-visible {\r\n    border-color: #949494;\r\n  }\r\n`;\r\n\r\nconst Select = styled.select`\r\n  ${CommonFormElement}\r\n  text-transform: capitalize;\r\n  appearance: none;\r\n  display: list-item;\r\n\r\n  user-select: none;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  ${CommonFormElement}\r\n`;\r\n\r\nconst Option = styled.option``;\r\n\r\nconst ButtonWrap = styled.div`\r\n  width: 120px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  width: 50px;\r\n  height: 50px;\r\n  font-size: 24px;\r\n  border-color: #949494;\r\n  border-radius: 5px;\r\n  color: #4b4b4b;\r\n`;\r\n\r\nconst SELECT_LIST: SelectListType = [\"email\", \"phone\", \"link\"];\r\n\r\nconst getOptionList = () => {\r\n  return SELECT_LIST.map((selectItem) => {\r\n    return (\r\n      <Option value={selectItem} key={selectItem}>\r\n        {selectItem}\r\n      </Option>\r\n    );\r\n  });\r\n};\r\n\r\nexport const FormItem = (props: FormItemPropsType) => {\r\n  const dispatch = useContext(FormDispatch);\r\n\r\n  const { index, type, value, canDeleteItem, canCopyItem } = props;\r\n\r\n  function getInputType(itemType: SelectType) {\r\n    switch (itemType) {\r\n      case \"email\": {\r\n        return \"email\";\r\n      }\r\n      case \"phone\": {\r\n        return \"tel\";\r\n      }\r\n      case \"link\": {\r\n        return \"url\";\r\n      }\r\n      default: {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FormItemWrap>\r\n      <Select\r\n        value={type}\r\n        onChange={(event) => {\r\n          dispatch({\r\n            type: \"changeSelect\",\r\n            payload: {\r\n              type: event.target.value as SelectType,\r\n              itemIndex: index,\r\n            },\r\n          });\r\n        }}\r\n      >\r\n        {getOptionList()}\r\n      </Select>\r\n      <Input\r\n        type={`${getInputType(type)}`}\r\n        value={value}\r\n        onChange={(event) => {\r\n          dispatch({\r\n            type: \"changeInput\",\r\n            payload: { value: event.target.value, itemIndex: index },\r\n          });\r\n        }}\r\n      />\r\n      <ButtonWrap>\r\n        {canCopyItem ? (\r\n          <Button\r\n            type=\"button\"\r\n            onClick={(event) => {\r\n              dispatch({ type: \"addFormItem\", itemIndex: index });\r\n            }}\r\n          >\r\n            +\r\n          </Button>\r\n        ) : null}\r\n        {canDeleteItem ? (\r\n          <Button\r\n            type=\"button\"\r\n            onClick={(event) => {\r\n              dispatch({ type: \"deleteFormItem\", itemIndex: index });\r\n            }}\r\n          >\r\n            -\r\n          </Button>\r\n        ) : null}\r\n      </ButtonWrap>\r\n    </FormItemWrap>\r\n  );\r\n};\r\n","import { ActionType, FormState } from \"../../types\";\r\n\r\nexport const formReducer = (\r\n  state: FormState,\r\n  action: ActionType\r\n): FormState => {\r\n  switch (action.type) {\r\n    case \"addFormItem\": {\r\n      const upperElementIndex = action.itemIndex;\r\n      const formItemList = state.formItemList;\r\n\r\n      const partBeforeNewItem = formItemList.slice(0, upperElementIndex + 1);\r\n      const partAfterNewItem = formItemList.slice(upperElementIndex + 1);\r\n\r\n      const newFormItem = {\r\n        ...formItemList[upperElementIndex],\r\n        id: state.counterId,\r\n      };\r\n\r\n      const newformItemList = [\r\n        ...partBeforeNewItem,\r\n        newFormItem,\r\n        ...partAfterNewItem,\r\n      ];\r\n\r\n      return {\r\n        ...state,\r\n        formItemList: newformItemList,\r\n        counterId: state.counterId + 1,\r\n      };\r\n    }\r\n\r\n    case \"deleteFormItem\": {\r\n      const currElIndex = action.itemIndex;\r\n      const newformItemList = state.formItemList.filter(\r\n        (formItem, itemIndex) => {\r\n          return itemIndex !== currElIndex;\r\n        }\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        formItemList: newformItemList,\r\n      };\r\n    }\r\n\r\n    case \"changeSelect\": {\r\n      //TODO: Clear input after changing select?\r\n      const { type: newType, itemIndex } = action.payload;\r\n\r\n      const newformItemList = state.formItemList.map(\r\n        (formItemElem, elemIndex) => {\r\n          if (elemIndex === itemIndex) {\r\n            return { ...formItemElem, type: newType };\r\n          } else return formItemElem;\r\n        }\r\n      );\r\n\r\n      const newState = {\r\n        ...state,\r\n        formItemList: newformItemList,\r\n      };\r\n\r\n      return newState;\r\n    }\r\n\r\n    case \"changeInput\": {\r\n      const { value: newValue, itemIndex } = action.payload;\r\n\r\n      const newformItemList = state.formItemList.map(\r\n        (formItemElem, elemIndex) => {\r\n          if (elemIndex === itemIndex) {\r\n            return { ...formItemElem, value: newValue };\r\n          } else {\r\n            return formItemElem;\r\n          }\r\n        }\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        formItemList: newformItemList,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import { useContext } from \"react\";\r\nimport { useReducer } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { AppDispatch } from \"../../AppDispatch\";\r\nimport { FormItem } from \"./FormItem\";\r\nimport { FormState } from \"../../types\";\r\nimport { formReducer } from \"./formReducer\";\r\nimport { FormDispatch } from \"./FormDispatch\";\r\n\r\nconst INITIAL_ID = 0;\r\nconst INITIAL_COUNTER = INITIAL_ID + 1;\r\nconst DEFAULT_TYPE = \"email\";\r\n\r\nconst FormContainer = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  min-height: 150px;\r\n  width: 800px;\r\n  background-color: #f5f5f5;\r\n  padding: 50px;\r\n\r\n  & > * {\r\n    margin: 10px;\r\n  }\r\n\r\n  & > *:last-child {\r\n    align-self: center;\r\n    margin: 40px 0 0 0;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n  width: 100px;\r\n  height: 50px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst initialState: FormState = {\r\n  formItemList: [\r\n    {\r\n      id: INITIAL_ID,\r\n      type: DEFAULT_TYPE,\r\n      value: \"\",\r\n    },\r\n  ],\r\n  counterId: INITIAL_COUNTER,\r\n};\r\n\r\nconst getForm = (state: FormState) => {\r\n  const canDeleteItem = state.formItemList.length > 1;\r\n\r\n  return state.formItemList.map(({ id, type, value }, index) => {\r\n    const canCopyItem = value.length > 0;\r\n\r\n    return (\r\n      <FormItem\r\n        index={index}\r\n        type={type}\r\n        value={value}\r\n        key={id}\r\n        canDeleteItem={canDeleteItem}\r\n        canCopyItem={canCopyItem}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport const Form = () => {\r\n  const appDispatch = useContext(AppDispatch);\r\n  const [state, dispatch] = useReducer(formReducer, initialState);\r\n\r\n  return (\r\n    <FormDispatch.Provider value={dispatch}>\r\n      <FormContainer>\r\n        {getForm(state)}\r\n        <SubmitButton\r\n          type=\"submit\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            appDispatch({ type: \"sendForm\", payload: state.formItemList });\r\n          }}\r\n        >\r\n          submit\r\n        </SubmitButton>\r\n      </FormContainer>\r\n    </FormDispatch.Provider>\r\n  );\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { AppDispatch } from \"../AppDispatch\";\r\nimport { AppState, FormDataType, FormItemValues } from \"../types\";\r\n\r\nconst MessageListWrap = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst MessageListContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  width: 400px;\r\n  border: 3px solid #949494;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst MessageListHeader = styled.h3`\r\n  color: #4b4b4b;\r\n`;\r\n\r\nconst FormData = styled.pre`\r\n  width: 300px;\r\n  border: 2px solid #949494;\r\n  border-radius: 3px;\r\n  padding: 10px;\r\n  min-height: 100px;\r\n`;\r\n\r\nconst ConvertButton = styled.button`\r\n  border-color: #949494;\r\n  border-radius: 5px;\r\n  color: #4b4b4b;\r\n  padding: 10px;\r\n`;\r\n\r\nconst getFormValuesString = (formData: FormDataType) => {\r\n  if (formData) {\r\n    const formDataString = JSON.stringify(formData, null, 2);\r\n    return formDataString;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getConvertedValuesString = (\r\n  convertedValues: FormItemValues<string>[]\r\n) => {\r\n  if (convertedValues.length > 0) {\r\n    const convertedDataString = JSON.stringify(convertedValues, null, 2);\r\n    return convertedDataString;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const MessageList = (props: AppState) => {\r\n  const appDispatch = useContext(AppDispatch);\r\n  const { formValues, convertedValues, message } = props;\r\n  return (\r\n    <MessageListWrap>\r\n      <MessageListContainer>\r\n        <MessageListHeader>Результат заполнения формы</MessageListHeader>\r\n\r\n        <FormData>{message || getFormValuesString(formValues)}</FormData>\r\n        <ConvertButton\r\n          type=\"button\"\r\n          disabled={Boolean(message)}\r\n          onClick={() => {\r\n            appDispatch({\r\n              type: \"convertData\",\r\n            });\r\n          }}\r\n        >\r\n          convertArrayToObject\r\n        </ConvertButton>\r\n        {<FormData> {getConvertedValuesString(convertedValues)}</FormData>}\r\n      </MessageListContainer>\r\n    </MessageListWrap>\r\n  );\r\n};\r\n","import { useReducer } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport { ActionType, AppState } from \"./types\";\r\nimport { Form } from \"./features/Form\";\r\nimport { MessageList } from \"./features/MessageList\";\r\nimport { getFormValues } from \"./business/getFormValues\";\r\nimport { convertArrayToObject } from \"./business/convertArrayToObject\";\r\nimport { AppDispatch } from \"./AppDispatch\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  margin: 50px auto 0 auto;\r\n  justify-content: space-around;\r\n  & > * {\r\n    margin: 0 30px;\r\n  }\r\n`;\r\n\r\nexport const reducer = (state: AppState, action: ActionType): AppState => {\r\n  switch (action.type) {\r\n    case \"sendForm\": {\r\n      const formData = action.payload;\r\n      const hasEmptyField = formData.find((formitem) => {\r\n        const { value } = formitem;\r\n        return value.length <= 0;\r\n      });\r\n\r\n      if (hasEmptyField) {\r\n        return {\r\n          ...state,\r\n          message: \"Форма не заполнена\",\r\n          convertedValues: [],\r\n        };\r\n      } else {\r\n        const formValues = getFormValues(formData);\r\n\r\n        return { ...state, formValues, convertedValues: [], message: null };\r\n      }\r\n    }\r\n\r\n    case \"convertData\": {\r\n      const formVlaues = state.formValues;\r\n      const convertedValues = convertArrayToObject(formVlaues);\r\n\r\n      if (convertedValues) {\r\n        return { ...state, convertedValues };\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nconst initialState = {\r\n  formValues: null,\r\n  convertedValues: [],\r\n};\r\n\r\nexport const App = () => {\r\n  const [state, appDispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <AppDispatch.Provider value={appDispatch}>\r\n      <Container>\r\n        <Form />\r\n        <MessageList\r\n          message={state.message}\r\n          formValues={state.formValues}\r\n          convertedValues={state.convertedValues}\r\n        />\r\n      </Container>\r\n    </AppDispatch.Provider>\r\n  );\r\n};\r\n","import { FormItemType, FormValuesType } from \"../types\";\r\n\r\nexport const getFormValues = (formData: FormItemType<string>[]) => {\r\n  const formValues = formData.reduce<FormValuesType<string>>(\r\n    (prevFormValues, currFormItem) => {\r\n      return {\r\n        type: [...prevFormValues.type, currFormItem.type],\r\n        value: [...prevFormValues.value, currFormItem.value],\r\n      };\r\n    },\r\n    { type: [], value: [] }\r\n  );\r\n\r\n  return formValues;\r\n};\r\n","import { FormDataType, FormItemValues } from \"../types\";\r\n\r\nexport const convertArrayToObject = (formValues: FormDataType) => {\r\n  if (formValues) {\r\n    const { type: typeList, value: valueList } = formValues;\r\n\r\n    const convertedArrayToObject = typeList.reduce<FormItemValues<string>[]>(\r\n      (prevArray, itemType, index) => {\r\n        const newFormItem: FormItemValues<string> = {\r\n          type: itemType,\r\n          value: valueList[index],\r\n        };\r\n\r\n        return [...prevArray, newFormItem];\r\n      },\r\n      []\r\n    );\r\n\r\n    return convertedArrayToObject;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}